package com.benairways.aviosrestservice;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

/**
 * A class representing price options, a selection of 4 price point objects to
 * be marshalled to a JSON in response to a GET request
 * 
 * @author Ben Patterson
 */
public class PriceOptions {

	private PricePoint[] pricePoints;
	// Obviously would use a proper database in a real world server!
	public static final String DATABASE = "src/main/resources/avios-value-table.csv";

	/**
	 * Create a PriceOptions object that is returned from a PriceOptions GET request
	 * on the server.
	 * 
	 * @throws IOException           If there is a failure to read the database of
	 *                               Avios values for different flight codes
	 * @throws IllegalStateException If there is a problem with the database content
	 */
	public PriceOptions(String departureAirportCode, String arrivalAirportCode, String departureTime,
			String arrivalTime, double price, String currencyCode) throws IOException {
		// Get the value per Avios for the flight codes from the database
		FlightCodes flightCodes = new FlightCodes(departureAirportCode, arrivalAirportCode);
		Map<FlightCodes, Double> flightCodeVals = getFlightCodeValues(DATABASE);
		Double valPerAvios = flightCodeVals.get(flightCodes);
		if (valPerAvios == null) {
			// default value
			valPerAvios = 0.02;
		}
		// Create the four price points
		pricePoints = new PricePoint[4];
		int[] percentages = { 20, 50, 70, 100 };
		for (int i = 0; i < 4; i++) {
			pricePoints[i] = new PricePoint(percentages[i], price, valPerAvios);
		}
	}

	public PricePoint[] getPricePoints() {
		return pricePoints;
	}

	// Protected constructor for testing
	protected PriceOptions() {
	}

	/**
	 * Retrieve the flight code values from a simple CSV database
	 * 
	 * @param csvPath The path of the CSV database
	 * @return A map of FlightCode objects to their value per avios
	 * @throws IOException           If there is a failure to read the database
	 * @throws IllegalStateException If there is a problem with the database content
	 */
	protected Map<FlightCodes, Double> getFlightCodeValues(String csvPath) throws IOException {
		Map<FlightCodes, Double> flightCodeValues = new HashMap<>();
		String csv = "";
		String stateError = "There was a problem with the data in the Avios points database";
		String ioError = "There was a problem reading the Avios points database";
		// Read the CSV, will throw an IO exception in failure
		try (BufferedReader br = new BufferedReader(new FileReader(new File(csvPath)))) {
			String line = "";
			while ((line = br.readLine()) != null) {
				csv += line + "\n";
			}
		} catch (IOException e) {
			throw new IOException(ioError);
		}
		// Using Apache commons CSV parser
		CSVParser parser;
		try {
			parser = CSVParser.parse(csv, CSVFormat.DEFAULT);
		} catch (IllegalArgumentException e) {
			// Data not properly formatted as a CSV
			throw new IllegalStateException(stateError);
		}
		// Loop through each line
		for (CSVRecord record : parser) {
			if (record.size() != 3) {
				// Lines should be formatted as code,code,avios-value
				throw new IllegalStateException(stateError);
			} else {
				Iterator<String> values = record.iterator();
				FlightCodes flightCodes = new FlightCodes(values.next(), values.next());
				double valPerAvios;
				try {
					valPerAvios = Double.parseDouble(values.next());
				} catch (NumberFormatException e) {
					// A 3rd element could not be parsed as a double
					throw new IllegalStateException(stateError);
				}
				flightCodeValues.put(flightCodes, valPerAvios);
			}
		}
		return flightCodeValues;
	}

	protected static class FlightCodes {

		String departure;
		String arrival;

		public FlightCodes(String departure, String arrival) {
			this.departure = departure;
			this.arrival = arrival;
		}

		// autogenerated hashcode & equals

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((arrival == null) ? 0 : arrival.hashCode());
			result = prime * result + ((departure == null) ? 0 : departure.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			FlightCodes other = (FlightCodes) obj;
			if (arrival == null) {
				if (other.arrival != null)
					return false;
			} else if (!arrival.equals(other.arrival))
				return false;
			if (departure == null) {
				if (other.departure != null)
					return false;
			} else if (!departure.equals(other.departure))
				return false;
			return true;
		}
	}

}
